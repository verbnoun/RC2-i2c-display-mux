#!/bin/bash

# Pico Project Builder
# Usage: pico-build [target] [--clean] [--verbose]

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
TOOLS_DIR="$(dirname "$SCRIPT_DIR")"
SOFTWAREC_DIR="$(dirname "$TOOLS_DIR")"

# Source environment
if [ -f "$SOFTWAREC_DIR/.env" ]; then
    source "$SOFTWAREC_DIR/.env"
else
    echo "Error: .env file not found in $SOFTWAREC_DIR"
    exit 1
fi

# Parse arguments
TARGET=""
CLEAN=false
VERBOSE=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --clean)
            CLEAN=true
            shift
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        *)
            if [ -z "$TARGET" ]; then
                TARGET="$1"
            else
                echo "Error: Unknown argument '$1'"
                exit 1
            fi
            shift
            ;;
    esac
done

# Check if we're in a Pico project directory
if [ ! -f "CMakeLists.txt" ]; then
    echo "Error: No CMakeLists.txt found. Run this command from a Pico project directory."
    echo "Use 'pico-init <project-name>' to create a new project."
    exit 1
fi

if [ ! -f "pico_sdk_import.cmake" ]; then
    echo "Error: No pico_sdk_import.cmake found. This doesn't appear to be a Pico project."
    exit 1
fi

# Validate SDK path
if [ ! -d "$PICO_SDK_PATH" ]; then
    echo "Error: Pico SDK not found at $PICO_SDK_PATH"
    echo "Check your .env configuration"
    exit 1
fi

BUILD_DIR="build"

# Clean if requested
if [ "$CLEAN" = true ]; then
    echo "🧹 Cleaning build directory..."
    rm -rf "$BUILD_DIR"
fi

# Create build directory
mkdir -p "$BUILD_DIR"

# Clean old UF2 files to prevent multiple UF2 confusion
if [ -d "$BUILD_DIR" ]; then
    OLD_UF2_FILES=$(find "$BUILD_DIR" -name "*.uf2" 2>/dev/null)
    if [ -n "$OLD_UF2_FILES" ]; then
        UF2_COUNT=$(echo "$OLD_UF2_FILES" | wc -l | tr -d ' ')
        echo "🧹 Removing $UF2_COUNT old UF2 file(s) to prevent confusion..."
        rm -f "$BUILD_DIR"/*.uf2
    fi
fi

echo "🔧 Building Pico project..."
echo "SDK: $PICO_SDK_PATH"
echo "Board: $PICO_BOARD"
echo "Platform: $PICO_PLATFORM"
echo "Build Type: $CMAKE_BUILD_TYPE"

# Configure with CMake
CMAKE_ARGS=(
    -S .
    -B "$BUILD_DIR"
    -DCMAKE_BUILD_TYPE="$CMAKE_BUILD_TYPE"
    -DPICO_BOARD="$PICO_BOARD"
    -DPICO_SDK_PATH="$PICO_SDK_PATH"
    -DPICO_COMPILER_PREFIX="$PICO_COMPILER_PREFIX"
    -DPICO_COPY_TO_RAM="$PICO_COPY_TO_RAM"
    -DPICO_STDIO_USB="$PICO_STDIO_USB"
    -DPICO_STDIO_UART="$PICO_STDIO_UART"
)

# Add generator if ninja is available
if command -v ninja >/dev/null 2>&1; then
    CMAKE_ARGS+=(-G Ninja)
    echo "Using Ninja build system"
else
    echo "Using default Make build system"
fi

if [ "$VERBOSE" = true ]; then
    CMAKE_ARGS+=(-DCMAKE_VERBOSE_MAKEFILE=ON)
fi

echo ""
echo "⚙️  Configuring CMake..."
"$CMAKE_PATH" "${CMAKE_ARGS[@]}"

echo ""
echo "🏗️  Building..."

# Build with CMake
if [ -n "$TARGET" ]; then
    echo "Building target: $TARGET"
    "$CMAKE_PATH" --build "$BUILD_DIR" --target "$TARGET"
else
    "$CMAKE_PATH" --build "$BUILD_DIR"
fi

echo ""
echo "✅ Build completed successfully!"

# Show build outputs
if [ -d "$BUILD_DIR" ]; then
    echo ""
    echo "📦 Build outputs:"
    find "$BUILD_DIR" -name "*.elf" -o -name "*.uf2" -o -name "*.hex" -o -name "*.bin" | while read -r file; do
        size=$(ls -lh "$file" | awk '{print $5}')
        echo "  $(basename "$file") ($size)"
    done
    
    # Look for .uf2 files specifically for flashing info
    UF2_FILES=$(find "$BUILD_DIR" -name "*.uf2")
    if [ -n "$UF2_FILES" ]; then
        UF2_COUNT=$(echo "$UF2_FILES" | wc -l | tr -d ' ')
        echo ""
        if [ "$UF2_COUNT" -eq 1 ]; then
            echo "💡 Ready to flash! Use: pico-flash"
        else
            echo "⚠️  Multiple UF2 files created ($UF2_COUNT) - pico-flash will use newest:"
            echo "$UF2_FILES" | while read -r file; do
                timestamp=$(stat -f "%Sm" -t "%H:%M:%S" "$file" 2>/dev/null || echo "unknown")
                echo "  $(basename "$file") - $timestamp"
            done
            echo "💡 Use: pico-flash (will auto-select newest)"
        fi
    fi
fi

echo ""